# SQL3 查询结果去重

## 描述

题目：现在运营需要查看用户来自于哪些学校，请从用户信息表中取出学校的去重数据。

示例:user_profile

| id   | device_id | gender | age  | university | province |
| ---- | --------- | ------ | ---- | ---------- | -------- |
| 1    | 2138      | male   | 21   | 北京大学   | Beijing  |
| 2    | 3214      | male   |      | 复旦大学   | Shanghai |
| 3    | 6543      | female | 20   | 北京大学   | Beijing  |
| 4    | 2315      | female | 23   | 浙江大学   | ZheJiang |
| 5    | 5432      | male   | 25   | 山东大学   | Shandong |

根据示例，你的查询应返回以下结果：

| university |
| ---------- |
| 北京大学   |
| 复旦大学   |
| 浙江大学   |
| 山东大学   |

## 示例1

输入：

```
drop table if exists user_profile;
CREATE TABLE `user_profile` (
`id` int NOT NULL,
`device_id` int NOT NULL,
`gender` varchar(14) NOT NULL,
`age` int ,
`university` varchar(32) NOT NULL,
`province` varchar(32)  NOT NULL);
INSERT INTO user_profile VALUES(1,2138,'male',21,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(2,3214,'male',null,'复旦大学','Shanghai');
INSERT INTO user_profile VALUES(3,6543,'female',20,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(4,2315,'female',23,'浙江大学','ZheJiang');
INSERT INTO user_profile VALUES(5,5432,'male',25,'山东大学','Shandong');
```

输出：

```
北京大学
复旦大学
浙江大学
山东大学
```

## 解析
1. ``DISTINCT``去重
```
SELECT 
	DISTINCT university 
	FROM user_profile
```
``DISTINCT``并不一定都是降低效率的。当数据重复量很高时，``DISTINCT``能提高查询效率

2. ``GROUP BY``去重
```
SELECT 
	university 
	FROM user_profile 
	GROUP BY university
```

### **``DISTINCT``与``GROUP BY``去重效率比较：**
* 在语义相同，有索引的情况下：
``DISTINCT``与``GROUP BY``都能使用索引，效率相同。``GROUP BY``可以被看做是特殊的``GROUP BY``。
* 在语义相同，无索引的情况下：
``DISTINCT``效率高于``GROUP BY``。原因是``DISTINCT``与``GROUP BY``都会进行分组操作，但``GROUP BY``在Mysql8.0之前会进行隐式排序，导致触发filesort，SQL执行效率低下。但从Mysql8.0开始，Mysql就删除了隐式排序，因此``DISTINCT``与``GROUP BY``的执行效率也是近乎等价的。

### 推荐``GROUP BY``的原因
相比于``DISTINCT``来说，``GROUP BY``的语义明确。且由于``DISTINCT``关键字会对所有字段生效，在进行复合业务处理时，``GROUP BY``的使用灵活性更高。``GROUP BY``能根据分组情况，对数据进行更为复杂的处理，例如通过``HAVING``对数据进行过滤，或通过聚合函数对数据进行运算。

------

# SQL4 查询结果限制返回行数

## 描述

题目：现在运营只需要查看前2个用户明细设备ID数据，请你从用户信息表 user_profile 中取出相应结果。

示例：

| id   | device_id | gender | age  | university | province |
| ---- | --------- | ------ | ---- | ---------- | -------- |
| 1    | 2138      | male   | 21   | 北京大学   | Beijing  |
| 2    | 3214      | male   |      | 复旦大学   | Shanghai |
| 3    | 6543      | female | 20   | 北京大学   | Beijing  |
| 4    | 2315      | female | 23   | 浙江大学   | ZheJiang |
| 5    | 5432      | male   | 25   | 山东大学   | Shandong |

根据输入，你的查询应返回以下结果：

| device_id |
| --------- |
| 2138      |
| 3214      |

## 示例1

输入：

```
drop table if exists user_profile;
CREATE TABLE `user_profile` (
`id` int NOT NULL,
`device_id` int NOT NULL,
`gender` varchar(14) NOT NULL,
`age` int ,
`university` varchar(32) NOT NULL,
`province` varchar(32)  NOT NULL);
INSERT INTO user_profile VALUES(1,2138,'male',21,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(2,3214,'male',null,'复旦大学','Shanghai');
INSERT INTO user_profile VALUES(3,6543,'female',20,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(4,2315,'female',23,'浙江大学','ZheJiang');
INSERT INTO user_profile VALUES(5,5432,'male',25,'山东大学','Shandong');
```

输出：

```
2138
3214
```

## 解析
```
SELECT 
	device_id 
	FROM user_profile 
	ORDER BY id
	LIMIT 0,2
```
1. 在Oracle中有一列隐藏列 ``rowNum``，也可以用于分页、限制结果条数。默认情况下``rowNum``的取值是按照记录插入到数据库中的顺序赋值的。``rowNum``的赋值是在数据库解析完查询语句后，在查询语句做排序或聚合函数执行之前完成的。
2. [MySQL没有RowNum，那我该怎么按“行”查询或删除数据？](https://zhuanlan.zhihu.com/p/225152902)

------

# SQL5 将查询后的列重新命名

## 描述

题目：现在你需要查看前2个用户明细设备ID数据，并将列名改为 'user_infos_example',，请你从用户信息表取出相应结果。

示例：user_profile

| id   | device_id | gender | age  | university | province |
| ---- | --------- | ------ | ---- | ---------- | -------- |
| 1    | 2138      | male   | 21   | 北京大学   | Beijing  |
| 2    | 3214      | male   |      | 复旦大学   | Shanghai |
| 3    | 6543      | female | 20   | 北京大学   | Beijing  |
| 4    | 2315      | female | 23   | 浙江大学   | ZheJiang |
| 5    | 5432      | male   | 25   | 山东大学   | Shandong |

根据示例，你的查询应返回以下结果：

| user_infos_example |
| ------------------ |
| 2138               |
| 3214               |

## 示例1

输入：

```
drop table if exists user_profile;
CREATE TABLE `user_profile` (
`id` int NOT NULL,
`device_id` int NOT NULL,
`gender` varchar(14) NOT NULL,
`age` int ,
`university` varchar(32) NOT NULL,
`province` varchar(32)  NOT NULL);
INSERT INTO user_profile VALUES(1,2138,'male',21,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(2,3214,'male',null,'复旦大学','Shanghai');
INSERT INTO user_profile VALUES(3,6543,'female',20,'北京大学','BeiJing');
INSERT INTO user_profile VALUES(4,2315,'female',23,'浙江大学','ZheJiang');
INSERT INTO user_profile VALUES(5,5432,'male',25,'山东大学','Shandong');
```

输出：

```
2138
3214
```

## 解析
```
SELECT 
	device_id AS user_infos_example
	FROM user_profile 
	ORDER BY id
	LIMIT 0,2
	// 别名加不加引号（单双）都可
    // 双引号会将别名解析成双引号里的内容，不使用双引号的话，即使别名全部命名成小写，也会被解析成大写字母。所以，双引号一般会用在最外层的select子句中，保证列名的大小写是想要的结果。
```